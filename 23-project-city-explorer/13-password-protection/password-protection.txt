Add Password Protection 
-----------------------
- Implement a simple password protection using "htpasswd" in the web application
    - It is a mechanism offered by the Apache web server
        - Reference (https://httpd.apache.org/docs/current/programs/htpasswd.html)
    
    - Offers an easy way to protect files
        - An alternative to creating a full fledged login system in PHP

    - Implmement file protection on "edit.php"

    - NOTE: Best practice to protect ALL files responsible for
        - Editing an entry (i.e. database record)
        - Submitting data to a different page
        - Page that saves updated data back into the database

    
- First, check if the web server is an Apache web server
    - Create a new file "helper.php"
        - Inside, make a call the function "phpinfo()"

    - Access the file "helper.php" on the browser
    
    - Look at the field "Server API"
        - It should have the assigned value of "Apache 2.0 Handler"

    - Search for the section name "Apache Environment"
        - It should have one

    - Both if searches are successful
        - Then the running web server is Apache

        - NOTE: NGINX web server does NOT support a way to password protect a directory or file


- On the project's root folder
    - Create a new file named ".htaccess"
        - This file functions as a local web server configuration file
        - It overrides certain configuration settings of the Apache web server

    - Set authentication using "AuthName"
        - Assign the description "Editing a city"

    - Set an authentication method using "AuthType"
        - Assign the value "Basic"

    - Set credential type to access the folder using "Require"
        - Assign the value "valid-user"

    - Save the changes
    
    - Reload the browser     
        - A "Sign in" prompt should appear
        - Requesting for "Username" and "Password" credentials
        
    - This confirms that the password protection is working

    
- Implement password protection on the file "edit.php"
    - At the beginning line of ".htaccess"

    - Declare a directive "<FilesMatch>.. </FilesMatch>"
        
    - On the opening "<FilesMatch>"
        - Declare the regex filename to search enclosed w/in a pair of ""

            "^(edit.php)$"

    - Move the rest of the previous configuration w/in the body of the "<FilesMatch>"

            <FilesMatch "^(edit.php)$">
                AuthName "Editing a city"
                AuthType Basic
                Require valid-user
            </FilesMatch>

    - NOTE: Offers the flexibility to password protect additional files
        - Use the "|" operator to separate files

              <FilesMatch "^(edit.php|other-file.php)$">
                AuthName "Editing a city"
                AuthType Basic
                Require valid-user
            </FilesMatch>          

    - Save the changes

    - Reload the browser

    - Accessing the "edit.php" file
        - A "Sign in" prompt appears
        - Requesting for "Username" and "Password" credentials


- Switch back to the file "helper.php"
    - Comment the call to the PHP function "phpinfo()"

    - Call the PHP function "password_hash()"
        - Pass the argument values "password" and PASSWORD_BCRYPT
            - 1st argument  = the plaintext string password
            - 2nd argument  = the algorithm used to encrpyt the plaintext password

        - Redirect the output to the PHP function "var_dump()"

            var_dump(password_hash('password', PASSWORD_BCRYPT));

    - Copy the generated hashed string value


- Create a new file ".htpasswd"
    - Declare the username "admin"
        - Type a ":"
        - Paste the copied hashed string value
    

- To connect the ".htaccess" and ".htpasswd"
    - Open ".htaccess"

    - Set the authentication user file "AuthUserFile"
        - Assign the fullpath of the file ".htpasswd"

        - NOTE: Use the directive "__DIR__" to determine the fullpath

    - Place "AuthUserFile" BEFORE the line "AuthType"

    - Save the changes

    - Reload the browser

    - Accessing the "edit.php" file
        - A "Sign in" prompt appears
        - Requesting for "Username" and "Password" credentials

    - Provide the credentials
        - Granted access to the file "edit.php"

    - NOTE: Once the credentials have successfully provided
        - Apache web server will NOT ask for it again throughout the current session
        - Until the browser has been closed

    
    